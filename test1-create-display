/*======================================================================================

Program: A simple [test] C program about creating and displaying a linked list. 
Created by: Shannen T. Nazareno
Date of creation: 11/07/2022
Date published: 11/08/2022

=======================================================================================*/

#include <stdio.h>
#include <stdlib.h>

struct node{
	int data;
	struct node *address;
};

struct node *temp, *createNode, *head;
int count = 0, i = 1;

void warningMessage1();
void warningMessage2();
int warningMessage3();

void createNodeFunc();

int main()
{
	int choice, userInput;
	int j=1;
	
	head = NULL;
	
	do{
		
	choice:
		printf ("What would you like to do now?\n");
		printf ("[1] Create a new list\n");
		printf ("[2] Display list\n");
		printf("[3] Total of nodes created\n");
		printf ("[0] EXIT\n");
		printf ("\tChoice: ");
		scanf ("%d", &choice);
		
		if(choice!= 0 && choice != 1 && choice !=2 &&choice!=3)
		{
			warningMessage1();
			goto choice;
		}
		else
		{
			printf ("\nYou chose %d.\n\n", choice);
		}
		
		switch(choice)
		{
			case 1:
				
				int userChoice;
				if(head!=NULL)
				{
					userChoice = warningMessage3();
					
					if(userChoice==1)
					{
						printf ("\n\nNOW DELETING THE ENTIRE LINKED LIST.\n\n");
						//a function here that will delete the entire linked list
					}
					else
					{
						goto choice;
					}
				}
				
				createNodeFunc();
				temp = head;
				break;
			
			case 2:
				if(count==0)
				{
					warningMessage2();
					goto choice;
				}
				else
				{
					temp = head;
					while(temp!=NULL)
					{
						printf ("Data %d: %d\n", j++, temp->data);
						temp = temp->address;
					}
					printf ("\n\n");
				}
				
				break;
			
			case 3:
				printf ("\nTotal number of nodes created: %d\n\n\n", count);
		}
		
		j = 1;
		
	}while(choice!=0);
	
	
	printf ("\n\n\t\t\tClosing the program...\n\n");
	free(head);
	free(temp);
	free(createNode);
	
	//alternative: should create a function wherein all nodes will be deleted
	return 0;
}

void warningMessage1()
{
	printf ("\n\nInvalid input. Try again.\n\n");
}

void warningMessage2()
{
	printf ("\n\nLinked list is empty. Try creating a new one.\n\n");
}

int warningMessage3()
{
	int choice;
	printf ("\n\n\t\t\t\t\t\t\t\t\a==WARNING==\n");
	printf ("\t\t\tUPON CHOOSING [1], YOU ARE ABOUT TO CREATE A NEW LIST WHICH MEANS YOU WILL \n\t\t\t\tNO LONGER HAVE AN ACCESS TO THE PREVIOUS LINKED LIST.\n");
choice:
	printf ("\n\t\t\\t\t\ttDo you want to continue? [1] Yes   [2] No");
	printf("\n\t\t\t\t\t\t\t\t\tChoice: ");
	scanf ("%d", &choice);
	
	if(choice!=1 && choice!=2)
	{
		warningMessage1();
		goto choice;
	}

	return choice;
}

void createNodeFunc()
{
	int choice;
	
addANode:
	createNode = (struct node*)malloc(sizeof(struct node));
	printf ("Enter data %d: ", i);
	scanf ("%d", &createNode->data);
	createNode->address = NULL;
	count++;
	
	if(head==NULL)
	{
		head = temp = createNode;
	}
	else
	{
		temp->address = createNode;
		temp = createNode;
	}

choice:
	printf ("\nWould you like to add a new node? [1] Yes  [2] No\n");
	printf ("\tChoice: ");
	scanf ("%d", &choice);
	printf ("\n");
	
	if(choice!=1 && choice!=2)
	{
		warningMessage1();
		goto choice;
	}
	
	if (choice==1)
	{
		i++;
		goto addANode;
	}
	
}
