/*=================================================================================================================================

Program: [PROJECT 1] A C program that helps user to create a single linked lists as well as performing operations
			on nodes such as inserting a node (beginning, end, nth position), deleting a node (beginning, end, nth position),
				and displaying the created list.

Created by: Shannen T. Nazareno
Date of creation: 11/09/2022
Date published: 11/10/2022

Note: Program is yet to be modified. 
===============================================================================================================================*/


#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

struct node{
	int data;
	struct node *address;
};

struct node *head, *temp, *newNode;
int n=0;

void warningMessage1(); //for invalid inputs
void warningMessage2();	//for empty linked list
int warningMessage3(); //for creating new linked list
void warningMessage4(); //for position that's unavailable
void createList();
void insert_at_beginning();
void insert_at_end();
void insert_at_nth(int);
void delete_at_beginning();
void delete_at_end();
void delete_at_nth(int);
void displayList();
void pressAnyKey();


int main()
{
	head = NULL;
	int input;
	
	do{
		inputChoice:
		printf ("========================================\n");
		printf ("What would you like to do now?\n");
		printf ("[1] Create a new list\n");
		printf ("[2] Insert\n");
		printf ("[3] Delete\n");
		printf ("[4] Display\n");
		printf ("[0] EXIT\n");
		printf ("\nChoice: ");
		scanf ("%d", &input);
		
		if(input!=0 && input!=1 && input!=2 &&input!=3 && input!=4)
		{
			warningMessage1();
			goto inputChoice;
		}
		else
		{
			printf ("\nYou have chosen %d.\n\n", input);
		}
		
		switch(input)
		{
			case 1: 
				
				if(head!=NULL)
				{
					int result;
					result= warningMessage3();
					
					if(result==1)
					{
						//function here that will delete all nodes
						free(head);
						head = NULL;
						createList();
					}
					else
					{
						goto inputChoice;
					}
				}
				else
				{
					createList();
				}
			break;
			
			case 2:
				int insertionChoice;
				
				if(head==NULL)
				{
					warningMessage2();
					goto inputChoice;
				}
				
			insertionType:
				printf ("\t\t\t\t===================================\n");
				printf ("\t\t\t\t\t\tINSERTION\n");
				printf ("\t\t\t\t\t[1] At the beginning\n");
				printf ("\t\t\t\t\t[2] At the end\n");
				printf ("\t\t\t\t\t[3] At the nth position\n");
				printf ("\t\t\t\t\t[4] BACK\n");
				printf ("\t\t\t\t\t\tChoice: ");
				scanf ("%d", &insertionChoice);
				
				if(insertionChoice!=1 && insertionChoice!=2 && insertionChoice!=3 && insertionChoice!=4)
				{
					warningMessage1();
					goto insertionType;
				}
				
				if (insertionChoice==4)
				{
					printf ("\n\n");
					goto inputChoice;
				}
				printf ("You have chosen %d.\n\n", insertionChoice);
				
				switch(insertionChoice)
				{
					case 1: insert_at_beginning(); break;
					case 2: insert_at_end(); break;
					case 3:
						int pos;
						enterPosition:
						printf ("Enter a position [start from 1]: ");
						scanf ("%d", &pos);
						
						if(pos>n)
						{
							warningMessage4();
							goto enterPosition;
						}
						
						if(pos<=0)
						{
							warningMessage1();
							goto enterPosition;
						}
						
						if (pos==1)
						{
							insert_at_beginning();
						}
						else if(pos==n)
						{
							insert_at_end();
						}
						else
						{
							insert_at_nth(pos);
						}
				}
				
			 break;
			 
			case 3: 
				
				if(head==NULL)
				{
					warningMessage2();
					goto inputChoice;
				}
				
				int deletionChoice;
				deletionType:
				printf ("\t\t\t\t============================\n");
				printf ("\t\t\t\t\tDELETION\n");
				printf ("\t\t\t\t[1] At the beginning\n");
				printf ("\t\t\t\t[2] At the end\n");
				printf ("\t\t\t\t[3] At the nth position\n");
				printf ("\t\t\t\t[4] BACK\n");
				printf ("\t\t\t\t\tChoice: ");
				scanf ("%d", &deletionChoice);
				
				if(deletionChoice!=1 && deletionChoice!=2 && deletionChoice!=3 && deletionChoice!=4)
				{
					warningMessage1();
					goto deletionType;
				}
				
				if(deletionChoice==4)
				{
					printf ("\n\n");
					goto inputChoice;
				}
				
				printf ("You have chosen %d.\n\n", deletionChoice);
				
				switch(deletionChoice)
				{
					case 1: delete_at_beginning(); break;
					case 2: delete_at_end(); break;
					case 3: 
					
					int pos;
					
					inputPositionforDeletion:
					printf ("Enter a position [start from 1]: ");
					scanf ("%d", &pos);
					
					if (pos>n)
					{
						warningMessage4();
						goto inputPositionforDeletion;
					}
					
					if (pos<=0)
					{
						warningMessage1();
						goto inputPositionforDeletion;
					}
					
					if (pos==1)
					{
						delete_at_beginning();
					}
						
					else if (pos==n)
					{
						delete_at_end();
					}
						
					else
					{
						delete_at_nth(pos);
					}
				}
				
			break;
			
			case 4: 
				
				if(head==NULL)
				{
					warningMessage2();
					goto inputChoice;
				}
				
				displayList();
				
			break;
		}
	}while(input!=0);
	
	printf ("\n\n\n\t\t\t\tClosing the program...\n\n\n");
	printf ("\n\n\n\t\t\t\tPress any key to completely terminate the program- ");
	getch();
	printf ("n\n");
	return 0;
}

void warningMessage1()
{
	printf ("\n\nInvalid input. Please try again.\n\n");
}

void warningMessage2()
{
	printf ("\n\nLinked list is empty. Try creating a new one by choosing [1] as the option.\n\n");
}

int warningMessage3()
{
	int choice;
	inputChoice:
	printf("\n\nYOU HAVE CHOSEN [1] AS YOUR INPUT.\n");
	printf ("You have created a linked list already. Upon proceeding, \n");
	printf ("\nyou will start again from scratch which means you'll lose reference/access\n");
	printf ("to you current linked list. Still proceed? ");
	printf ("\n\t[1] Yes  [2] No");
	printf ("\n\n\t\tChoice: ");
	scanf ("%d", &choice);
	
	if(choice!=1 && choice!=2)
	{
		warningMessage1();
		goto inputChoice;
	}
	
	printf ("\n\n");
	
	pressAnyKey();
	return choice;
}

void warningMessage4()
{
	printf ("\n\nPosition doesn't exist. Try entering a valid one.\n\n");
}

void createList()
{
	int i=1;
	printf ("Enter number of nodes for your linked list: ");
	scanf ("%d", &n);
	
	printf ("\n");
	while(i<=n)
	{
		newNode = (struct node*)malloc(sizeof(struct node));
		printf ("Enter data %d: ", i);
		scanf ("%d", &newNode->data);
		newNode->address = NULL;
		
		if(head==NULL)
		{
			head = temp = newNode;
		}
		else
		{
			temp->address = newNode;
			temp = newNode;
		}
		i++;
	}
	printf ("\n\n");
}

void displayList()
{
	temp = head;
	int i=1;
	while(temp!=NULL)
	{
		printf ("Data %d: %d\n", i++, temp->data);
		temp = temp->address;
	}
	
	temp = head;
	printf ("\n\n");
	pressAnyKey();
}


//3 functions for insertion
void insert_at_beginning()
{
	newNode = (struct node*)malloc(sizeof(struct node));
	printf ("Enter data to be inserted at the beginning: ");
	scanf ("%d", &newNode->data);
	
	newNode->address = head;
	head = newNode;
	n++;
	pressAnyKey();
}

void insert_at_end()
{
	newNode = (struct node*)malloc(sizeof(struct node));
	printf ("Enter data to be inserted at the end: ");
	scanf ("%d", &newNode->data);
	newNode->address = NULL;
	
	temp = head;
	while(temp->address!=NULL)
	{
		temp = temp->address;
	}
	
	temp->address = newNode;
	n++;
	pressAnyKey();
}

void insert_at_nth(int pos)
{
	int i=1;
	newNode = (struct node*)malloc(sizeof(struct node));
	printf ("Enter data to be inserted at the given position: ");
	scanf ("%d", &newNode->data);
	
	temp = head;
	
	while(i<pos-1)
	{
		temp=temp->address;
		i++;
	}
	
	newNode->address = temp->address;
	temp->address = newNode;
	
	temp = head;
	
	n++;
	pressAnyKey();
}
//3 functions for deletion

void delete_at_beginning()
{
	struct node *freeThisNode;
	temp = head;
	
	freeThisNode = temp;
	head = temp->address;
	temp = head;
	
	free(freeThisNode);
	freeThisNode = NULL;
	n--;
	pressAnyKey();
}

void delete_at_end()
{
	struct node *freeThisNode;
	freeThisNode = head;
	
	while(freeThisNode->address!=NULL)
	{
		temp = freeThisNode;
		freeThisNode = freeThisNode->address;
	}
	
	free(freeThisNode);
	freeThisNode = NULL;
	temp->address = NULL;
	n--;
	pressAnyKey();
	temp = head;
}

void delete_at_nth(int pos)
{
	int i=1;
	struct node *freeThisNode, *prevNode;
	
	prevNode = NULL;
	temp = head;
	
	while(i<pos)
	{
		prevNode = temp;
		temp = temp->address;
		i++;
	}
	
	freeThisNode = temp;
	prevNode->address = temp->address;
	free(freeThisNode);
	freeThisNode = NULL;
	
	temp = head;
	
	n--;
	
	pressAnyKey();
}

void pressAnyKey()
{
	printf ("\n\nPress any key to proceed- ");
	getch();
	printf ("\n\n");
}

//function to delete all nodes will be implemented here soon
