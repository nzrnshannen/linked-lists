/*===========================================================================
								TEST 3
Progran: A C program used to create and display linked list, as well as 
		delete nodes (at the beginning, end, or at nth position).
Created by: Shannen T. Nazareno
Date created: 11/09/2022
Date published: 11/09/2022

Note: This is not the complete program. 
============================================================================*/


#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

struct node{
	int data;
	struct node *address;
};

struct node *head, *temp, *newNode;

void warningMessage1();
int warningMessage2();
void delete_at_beginning();
void delete_at_end();
void delete_at_nth(int);
void displayList();

int main()
{
	head = NULL;
	
	int n, i=1, choice, input;	
	enterNodes:
	printf("Enter the number of nodes you want for your linked list: ");
	scanf ("%d", &n);
	
	if (n==0)
	{
		printf ("\nEmpty linked list. Not suitable for this program.\n\n");
		goto enterNodes;
	}
	while(i<=n)
	{
		newNode = (struct node*)malloc(sizeof(struct node));
		printf ("Enter data %d: ", i);
		scanf ("%d", &newNode->data);
		newNode->address = NULL;
		i++;
		
		if(head==NULL)
		{
			head = temp = newNode;
		}
		else
		{
			temp->address = newNode;
			temp = newNode;
		}
	}
	
	do{
		inputChoice:
		printf ("\nWhat do you want to do now?\n");
		printf ("[1] Delete first node\n");
		printf ("[2] Delete last node\n");
		printf ("[3] Delete node from nth position\n");
		printf ("[4] Display list\n");
		printf ("[0] EXIT\n");
		printf ("\tChoice: ");
		scanf ("%d", &input);
		
		if(input!=0 && input!=1 && input!=2 && input!=3 && input!=4)
		{
			warningMessage1();
			goto inputChoice;
		}
		
		printf ("\n\nYou chose %d.\n\n", input);
		
		switch(input)
		{
			case 1: 
			int result;
			if(n==1)
			{
				result = warningMessage2();
				
				if(result==1)
				{
					delete_at_beginning();
				}
				else
				{
					goto inputChoice;
				}
			}
			
			delete_at_beginning();
			
			break;
			
			case 2: 
			if (n==1)
			{
				result = warningMessage2();
				if(result==1)
				{
					delete_at_end();
				}
				else
				{
					goto inputChoice;
				}
			}
			
			delete_at_end();
			
			break;
			case 3: 
			
			int pos;
			enterPosition:
			printf ("\nEnter a position: ");
			scanf ("%d", &pos);
			
			if (pos>n)
			{
				printf ("\n\nPosition entered not applicable with the length of the list. Try again.\n\n");
				goto enterPosition;
			}
			else if (pos==1)
			{
				delete_at_beginning();
			}
			else if (pos==n)
			{
				delete_at_end();
			}
			else
			{
				delete_at_nth(pos);
			}
			
			break;
			case 4: 
			displayList();
			break;
		}
	}while(input!=0);
	
	printf ("\n\t\t\t\t\tClosing the progran...\n\n");
	getch();
	return 0;
}

void warningMessage1()
{
	printf ("Invalid input. Try again.\n\n");
}

int warningMessage2()
{
	int choice;
	inputChoice:
	printf ("You have only one node created. Upon proceeding, you will have an empty linked list\n\tas a result. \nDo you wish to proceed? [1] Yes  [2] No");
	printf ("\n\t\tChoice: ");
	scanf ("%d", &choice);
	
	if(choice!=1 && choice!=2)
	{
		warningMessage1();
		goto inputChoice;
	}
	
	return choice;
}

void displayList()
{
	temp = head;
	int i = 1;
	
	printf ("Displaying the linked list: \n");
	
	while(temp!=NULL)
	{
		printf ("\tData %d: %d\n", i++, temp->data);
		temp = temp->address;
	}
	
	temp = head;
}

void delete_at_beginning()
{
	temp = head;
	struct node * freeThisNode;
	freeThisNode = temp;
	temp = temp->address;
	
	head = temp;
	
	free(freeThisNode);
	freeThisNode = NULL;
	
	temp = head;
}

void delete_at_end()
{
	temp = head;
	struct node *prevNode;
	
	while(temp->address!=NULL)
	{
		prevNode = temp;
		temp = temp->address;
	}
	
	
	struct node *freeThisNode;
	
	freeThisNode = temp;
	free(freeThisNode);
	
	prevNode->address = NULL;
	
	temp = head;
}

void delete_at_nth(int pos)
{
	int i=1;
	temp = head;
	
	struct node *prevNode, *freeThisNode;
	prevNode = NULL;
	while(i<pos)
	{
		prevNode = temp;
		temp = temp->address;
		i++;
	}
	freeThisNode = temp;
	
	prevNode->address = temp->address;
	free(freeThisNode);
	freeThisNode = NULL;
	
	temp = head;
	
}
